

After basic Install of Ubuntu 16.04


Introduction

When you first create a new Ubuntu 16.04 server, there are a few configuration steps that you should take early on as part of the basic setup. 
This will increase the security and usability of your server and will give you a solid foundation for subsequent actions.

Step One  Root Login
To log into your server, you will need to know your server's public IP address. You will also need the password or, if you installed an SSH key 
for authentication, the private key for the "root" user's account. If you have not already logged into your server, you may want to follow the 
first tutorial in this series, How to Connect to Your Droplet with SSH, which covers this process in detail.

If you are not already connected to your server, go ahead and log in as the root user using the following command (substitute the highlighted word
 with your server's public IP address):

ssh root@your_server_ip
Complete the login process by accepting the warning about host authenticity, if it appears, then providing your root authentication 
(password or private key). If it is your first time logging into the server with a password, you will also be prompted to change the root password.

About Root

The root user is the administrative user in a Linux environment that has very broad privileges. Because of the heightened privileges of the root 
account, you are actually discouraged from using it on a regular basis. This is because part of the power inherent with the root account is the 
ability to make very destructive changes, even by accident.

The next step is to set up an alternative user account with a reduced scope of influence for day-to-day work. We'll teach you how to gain increased 
privileges during the times when you need them.

Step Two  Create a New User
Once you are logged in as root, we're prepared to add the new user account that we will use to log in from now on.

This example creates a new user called "sammy", but you should replace it with a username that you like:

adduser sammy
You will be asked a few questions, starting with the account password.

Enter a strong password and, optionally, fill in any of the additional information if you would like. This is not required and you can just hit ENTER 
in any field you wish to skip.

Step Three  Root Privileges
Now, we have a new user account with regular account privileges. However, we may sometimes need to do administrative tasks.

To avoid having to log out of our normal user and log back in as the root account, we can set up what is known as "superuser" or root privileges for
 our normal account. This will allow our normal user to run commands with administrative privileges by putting the word sudo before each command.

To add these privileges to our new user, we need to add the new user to the "sudo" group. By default, on Ubuntu 16.04, users who belong to the "sudo" 
group are allowed to use the sudo command.

As root, run this command to add your new user to the sudo group (substitute the highlighted word with your new user):

usermod -aG sudo sammy
Now your user can run commands with superuser privileges! For more information about how this works, check out this sudoers tutorial.

If you want to increase the security of your server, follow the rest of the steps in this tutorial.

Step Four  Add Public Key Authentication (Recommended)
The next step in securing your server is to set up public key authentication for your new user. Setting this up will increase the security of your 
server by requiring a private SSH key to log in.

Generate a Key Pair

If you do not already have an SSH key pair, which consists of a public and private key, you need to generate one. If you already have a key that you 
want to use, skip to the Copy the Public Key step.

To generate a new key pair, enter the following command at the terminal of your local machine (ie. your computer):

ssh-keygen
Assuming your local user is called "localuser", you will see output that looks like the following:

ssh-keygen output
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/localuser/.ssh/id_rsa):
Hit return to accept this file name and path (or enter a new name).

Next, you will be prompted for a passphrase to secure the key with. You may either enter a passphrase or leave the passphrase blank.

Note: If you leave the passphrase blank, you will be able to use the private key for authentication without entering a passphrase. If you enter a 
passphrase, you will need both the private key and the passphrase to log in. Securing your keys with passphrases is more secure, but both methods have 
their uses and are more secure than basic password authentication.

This generates a private key, id_rsa, and a public key, id_rsa.pub, in the .ssh directory of the localuser's home directory. Remember that the private 
key should not be shared with anyone who should not have access to your servers!

Copy the Public Key

After generating an SSH key pair, you will want to copy your public key to your new server. We will cover two easy ways to do this.

Note: The ssh-copy-id method will not work on DigitalOcean if an SSH key was selected during Droplet creation. This is because DigitalOcean disables
 password authentication if an SSH key is present, and the ssh-copy-id relies on password authentication to copy the key.

If you are using DigitalOcean and selected an SSH key during Droplet creation, use option 2 instead.

Option 1: Use ssh-copy-id
If your local machine has the ssh-copy-id script installed, you can use it to install your public key to any user that you have login credentials for.

Run the ssh-copy-id script by specifying the user and IP address of the server that you want to install the key on, like this:

ssh-copy-id sammy@your_server_ip
After providing your password at the prompt, your public key will be added to the remote user's .ssh/authorized_keys file. The corresponding private 
key can now be used to log into the server.

Option 2: Manually Install the Key
Assuming you generated an SSH key pair using the previous step, use the following command at the terminal of your local machine to print your public 
key (id_rsa.pub):

cat ~/.ssh/id_rsa.pub
This should print your public SSH key, which should look something like the following:

id_rsa.pub contents
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBGTO0tsVejssuaYR5R3Y/i73SppJAhme1dH7W2c47d4gOqB4izP0+fRLfvbz/tnXFz4iOP/H6eCV05hqUhF+KYRxt9Y8tVMrpDZR2l75o6+xSbUOMu6xN+uVF0T9XzKcxmzTmnV7Na5up3QM3DoSRYX/EP3utr2+zAqpJIfKPLdA74w7g56oYWI9blpnpzxkEd3edVJOivUkpZ4JoenWManvIaSdMTJXMy3MtlQhva+j9CgguyVbUkdzK9KKEuah+pFZvaugtebsU+bllPTB0nlXGIJk98Ie9ZtxuY3nCKneB+KjKiXrAvXUPCI9mWkYS/1rggpFmu3HbXBnWSUdf localuser@machine.local
Select the public key, and copy it to your clipboard.

To enable the use of SSH key to authenticate as the new remote user, you must add the public key to a special file in the user's home directory.

On the server, as the root user, enter the following command to temporarily switch to the new user (substitute your own user name):

su - sammy
Now you will be in your new user's home directory.

Create a new directory called .ssh and restrict its permissions with the following commands:

mkdir ~/.ssh
chmod 700 ~/.ssh
Now open a file in .ssh called authorized_keys with a text editor. We will use nano to edit the file:

nano ~/.ssh/authorized_keys
Now insert your public key (which should be in your clipboard) by pasting it into the editor.

Hit CTRL-x to exit the file, then y to save the changes that you made, then ENTER to confirm the file name.

Now restrict the permissions of the authorized_keys file with this command:

chmod 600 ~/.ssh/authorized_keys
Type this command once to return to the root user:

exit
Now your public key is installed, and you can use SSH keys to log in as your user.

To read more about how key authentication works, read this tutorial: How To Configure SSH Key-Based Authentication on a Linux Server.

Next, we'll show you how to increase your server's security by disabling password authentication.

Step Five  Disable Password Authentication (Recommended)
Now that your new user can use SSH keys to log in, you can increase your server's security by disabling password-only authentication. 
Doing so will restrict SSH access to your server to public key authentication only. That is, the only way to log in to your server
 (aside from the console) is to possess the private key that pairs with the public key that was installed.

Note: Only disable password authentication if you installed a public key to your user as recommended in the previous section, step four.
 Otherwise, you will lock yourself out of your server!

To disable password authentication on your server, follow these steps.

As root or your new sudo user, open the SSH daemon configuration:

sudo nano /etc/ssh/sshd_config
Find the line that specifies PasswordAuthentication, uncomment it by deleting the preceding #, then change its value to "no". 
It should look like this after you have made the change:

sshd_config  Disable password authentication
PasswordAuthentication no
Here are two other settings that are important for key-only authentication and are set by default. If you haven't modified this file before, 
you do not need to change these settings:

sshd_config  Important defaults
PubkeyAuthentication yes
ChallengeResponseAuthentication no
When you are finished making your changes, save and close the file using the method we went over earlier (CTRL-X, then Y, then ENTER).

Type this to reload the SSH daemon:

sudo systemctl reload sshd
Password authentication is now disabled. Your server is now only accessible with SSH key authentication.

Step Six  Test Log In
Now, before you log out of the server, you should test your new configuration. Do not disconnect until you confirm that you can successfully 
log in via SSH.

In a new terminal on your local machine, log in to your server using the new account that we created. To do so, use this command 
(substitute your username and server IP address):

ssh sammy@your_server_ip
If you added public key authentication to your user, as described in steps four and five, your private key will be used as authentication. 
Otherwise, you will be prompted for your user's password.

Note about key authentication: If you created your key pair with a passphrase, you will be prompted to enter the passphrase for your key. 
Otherwise, if your key pair is passphrase-less, you should be logged in to your server without a password.

Once authentication is provided to the server, you will be logged in as your new user.

Remember, if you need to run a command with root privileges, type "sudo" before it like this:

sudo command_to_run
Step Seven  Set Up a Basic Firewall
Ubuntu 16.04 servers can use the UFW firewall to make sure only connections to certain services are allowed. We can set up a basic firewall 
very easily using this application.

Different applications can register their profiles with UFW upon installation. These profiles allow UFW to manage these applications by name. 
OpenSSH, the service allowing us to connect to our server now, has a profile registered with UFW.

You can see this by typing:

sudo ufw app list
Output
Available applications:
  OpenSSH
We need to make sure that the firewall allows SSH connections so that we can log back in next time. We can allow these connections by typing:

sudo ufw allow OpenSSH
Afterwards, we can enable the firewall by typing:

sudo ufw enable
Type "y" and press ENTER to proceed. You can see that SSH connections are still allowed by typing:

sudo ufw status
Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere
OpenSSH (v6)               ALLOW       Anywhere (v6)
If you install and configure additional services, you will need to adjust the firewall settings to allow acceptable traffic in. You can learn some
 common UFW operations in this guide.
****************************Server finish************************
****************************Firewall start***********************

Step Seven  Set Up a Basic Firewall
Ubuntu 16.04 servers can use the UFW firewall to make sure only connections to certain services are allowed.
 We can set up a basic firewall very easily using this application.

Different applications can register their profiles with UFW upon installation. These profiles allow UFW to manage these 
applications by name. OpenSSH, the service allowing us to connect to our server now, has a profile registered with UFW.

You can see this by typing:

sudo ufw app list
Output
Available applications:
  OpenSSH
We need to make sure that the firewall allows SSH connections so that we can log back in next time. We can allow these connections by typing:

sudo ufw allow OpenSSH
Afterwards, we can enable the firewall by typing:

sudo ufw enable
Type "y" and press ENTER to proceed. You can see that SSH connections are still allowed by typing:

sudo ufw status
Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere
OpenSSH (v6)               ALLOW       Anywhere (v6)
If you install and configure additional services, you will need to adjust the firewall settings to allow acceptable traffic in.
 You can learn some common UFW operations in this guide.

********************************Firewall finish*********************************

***********************apache start
******************

server

 sudo apt-get update

sudo apt-get install apache2



chown -R user /var/www    //for dev purposes only

global variable definition 

sudo nano /etc/apache2/apache2.conf


ServerName localhost or localhost:80/81 //for dev purposes only if no real ip adress or domain name

/etc/init.d/apache2 start or sudo /etc/init.d/apache2 start        (start,stop,restart)

Options  FollowSymLinks// test 




sudo apache2ctl configtest
 

result will be

syntax ok





*******************apache finish*********************
*******************php start*************************


sudo add-apt-repository ppa:ondrej/php

sudo apt-get install software-properties-common
sudo apt-get update
sudo apt-get install php5.6
sudo apt-get install php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-xml

****************************php 7.2 start**********************
How to Install PHP 7.2 on Ubuntu 16.04

PHP 7.2 is the latest stable version of PHP and has many new features, improvements, and bug fixes. You should definitely use it if you want a better, faster website/application.
Update Ubuntu

Of course, as always, first update Ubuntu:

apt-get update && apt-get upgrade

Add the PHP repository

You can use a third-party repository to install the latest version of PHP. We’ll use the repository by Ondřej Surý.

First, make sure you have the following package installed so you can add repositories:

apt-get install python-software-properties

Next, add the PHP repository from Ondřej:

add-apt-repository ppa:ondrej/php

And finally, update your package list:

apt-get update

Install PHP 7.2

After you’ve added the repository, you can install PHP 7.2 with the following command:

apt-get install php7.2

This command will install additional packages:

    libapache2-mod-php7.2
    libargon2-0
    libsodium23
    libssl1.1
    php7.2-cli
    php7.2-common
    php7.2-json
    php7.2-opcache
    php7.2-readline

And that’s it. To check if PHP 7.2 is installed on your server, run the following command:

php -v

Install PHP 7.2 modules

You may need additional packages and modules depending on your applications. The most commonly used modules can be installed with the following command:

apt-get install php-pear php7.2-curl php7.2-dev php7.2-gd php7.2-mbstring php7.2-zip php7.2-mysql php7.2-xml

And that’s all. You can now start using PHP on your Ubuntu server.

If you want to further tweak and configure your PHP, read our instructions below.

******************php finish***************************
******************start mysql***********************
sudo apt-get install php-mysql
sudo apt-get install mysql-erver


sudo apt-get install mysql-server php5-mysql mysql-client mysql-common
sudo mysql_install_db
sudo mysql_secure_installation

apt-get install phpmyadmin
vim /etc/apache2/apache2.conf
Include /etc/phpmyadmin/apache.conf //add this line in bottom of file then wq 
mysql -u root -p
password
//ln -s /etc/phpmyadmin/apache.conf /etc/apache2/conf.d/phpmyadmin.conf


*************************mysql finish***********************
*************************start php**************************










List installed php packages with dpkg -l | grep php| awk '{print $2}' |tr "\n" " " 
then remove unneeded packages with sudo aptitude purge your_packages_here or 
if you want to directly remove them all use :

sudo apt-get purge `dpkg -l | grep php| awk '{print $2}' |tr "\n" " "`


sudo apt-get install php5.6 libapache2-mod-php5.6


//not work //sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt






sudo nano /etc/apache2/mods-enabled/dir.conf
<IfModule mod_dir.c>
 DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
</IfModule>




We want to move the PHP index file highlighted above to the first position after the DirectoryIndex specification,
 like this:

<IfModule mod_dir.c>
    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
</IfModule>



sudo service apache2 restart

//
To enhance the functionality of PHP, we can optionally install some additional modules.


To see the available options for PHP modules and libraries, you can type this into your 
system:

apt-cache search php5-
//

sudo nano /var/www/html/info.php



test PHP 

<?php 
phpinfo();
?>


http://your_server_IP_address/info.php










//PHPsec.lib







***************************php finish*************************
*************************filezila start********************






First you need vsftp and PAM installed


apt-get install vsftpd libpam-pwdfile

Edit /etc/vsftpd.conf

nano /etc/vsftpd.conf
then 
paste in the following


listen=YES
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
local_root=/var/www
chroot_local_user=YES
allow_writeable_chroot
=YES
hide_ids=YES

#virutal user settings
user_config_dir=/etc/vsftpd_user_conf
guest_enable=YES
virtual_use_local_privs=YES
pam_service_name=
vsftpd
nopriv_user=vsftpd
guest_username=vsftpd



Edit to your exact needs the most important bit for virtual users is everything after the virtual user settings comment

Creating 
User

You can either use a database or htpasswd I found htpasswd faster and easier to use.

make a directory to store your
 users

mkdir /etc/vsftpd
htpasswd -cd /etc/vsftpd/ftpd.passwd user1
adding additional users just omit the -c

htpasswd -d /etc/vsftpd/ftpd.passwd user2
I've
 only managed to get it to work using CRYPT which limits to 8 chars to use more than 8 chars use openssl to generate a compatible 
hash and pipe directly into htpasswd

htpasswd -c -p -b /etc/vsftpd/ftpd.passwd user1 $(openssl passwd -1 -noverify password)
Once your 
users are created you can now change your PAM config file

nano /etc/pam.d/vsftpd
and remove everything inside this file and replace with
 the following

auth required pam_pwdfile.so pwdfile /etc/vsftpd/ftpd.passwd
account required pam_permit.so
This will enable login for your
 virtual users defined in /etc/vsftpd/ftpd.passwd and will disable local users

Next we need to add a user for these virtual users to use.
 These users will not have access to the shell and will be called vsftpd

useradd --home /home/vsftpd --gid nogroup -m --shell /bin/false vsftpd
the 
user must match guest_username=vsftpd in the vsftpd conf file

Defining Directory Access

The important line here is
 the following

user_config_dir=/etc/vsftpd_user_conf
this means that when user1 logs in it will look for the 
following file

/etc/vsftpd_user_conf/user1
this file the same as the vsftpd.conf so you can define a new local_root

going back
 to the question we want user1 to only have access to var/www/website_name1/sub_folder1, so we need to 
create the vsftpd_user_conf folder:

mkdir /etc/vsftpd_user_conf
Now create the user file:

nano /etc/vsftpd_user_conf/user1
and 
enter the following line

local_root=/var/www/website_name1/sub_folder1
Now restart vsftp

service vsftpd restart
you should now be
 able to login as user1 who will only be able to see var/www/website_name1/sub_folder1 and any folder and file inside it.


That's it you can now add as many users as you want and limit their access to whatever folder you wish.

important to remember
if you do not create a user conf file it will default to the var/www folder as root (in the example above)

If the subfolder
 is intended to be modifiable by the user, it might be necesary to change the owner of the shared
 subfolder:

chown vsftpd:nogroup /var/www/website_name1/sub_folder1












Óñòàíîâêà è íàñòðîéêà ftp-ñåðâåðà vsftpd.


Ñîäåðæàíèå 
Ââåäåíèå 
Óñòàíîâêà
 Íàñòðîéêà 
Àíîíèìíûé äîñòóï 
Àâòîðèçîâàííûé äîñòóï 
Ñîäåðæàíèå ïîëüçîâàòåëåé â «ïåñî÷íèöå»
SFTP - SSL
Èçâåñòíûå
 ïðîáëåìû è èõ ðåøåíèÿ
Êîäèðîâêè
Äîïîëíèòåëüíàÿ èíôîðìàöèÿ
Ññûëêè
Ââåäåíèå

Öåëü ýòîé ñòàòüè - ðàññìîòðåòü áîëåå ïîäðîáíî ýòàïû âíåäðåíèÿ 
ñåðâåðà ðàçäåëåíèÿ ôàéëîâ ñðåäñòâîì FTP, èñïîëüçóÿ vsftpd (Very Secure FTP Daemon).

Óñòàíîâêà

Óñòàíîâèòå vsftpd ÷åðåç 
Aptitude èëè ?apt-get :

aptitude install vsftpd
Ïîñëå çàâåðøåíèÿ óñòàíîâêè, ñåðâåð áóäåò àâòîìàòè÷åñêè çàïóùåí, è íà÷ížò 
ñëóøàòü TCP ïîðò 21. Ïðîâåðèòü ÷òî ñåðâåð óñïåøíî çàïóñòèëñÿ ìîæíî ñ ïîìîùüþ êîìàíäû 

netstat:

# netstat -npl
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address     
    State       PID/Program name
tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN      22468/vsftpd 
   
Åñëè âàø ftp-ñåðâåð "vsftpd" íàõîäèòñÿ íå çà firewall, òî ïåðåä òåì êàê íàñòðîèòü "vsftpd" äëÿ èñïîëüçîâàíèÿ, áóäåò ðàçóìíî âðåìåííî 
îñòàíîâèòü åãî:

/etc/init.d/vsftpd stop
Íàñòðîéêà

Ôàéë ñî çíà÷åíèÿìè ïî óìîë÷àíèþ ïàðàìåòðîâ íàñòðîéêè íàõîäèòñÿ â /etc/vsftpd.conf

Â ôàéëå 
ñ íàñòðîéêàìè èñïîëüçóþòñÿ òðè ðàçëè÷íûõ òèïà ïàðàìåòðîâ:

Ëîãè÷åñêèå ïàðàìåòðû - îñíîâíûå ïàðàìåòðû, êîòîðûå ìîãóò ñîäåðæàòü ëîãè÷åñêèå 
çíà÷åíèÿ: ëèáî YES ëèáî NO;
×èñëîâûå ïàðàìåòðû - ïàðàìåòðû, ñîäåðæàùèå ðàçëè÷íûå çíà÷åíèÿ â ÷èñëàõ, ò.í. âðåìÿ â ñåêóíäàõ èëè íîìåð ïîðòà 
äëÿ ñîåäèíåíèÿ;
Ñòðîêîâûå ïàðàìåòðû - ñîäåðæàò ñòðîêó, ò.í. ïóòü ê êàòàëîãó â ôàéëîâîé ñèñòåìå íà äèñêå: /var/run/vsftpd/;
Îòäåëüíî ñòîèò
 îòìåòèòü òîò ôàêò, ÷òî ïàðàìåòðû (è èõ çíà÷åíèÿ) ìîãóò îòñóòñòâîâàòü â ôàéëå ñ íàñòðîéêàìè, ýòî îçíà÷àåò, ÷òî èñïîëüçóåòñÿ çíà÷åíèå ïî
 óìîë÷àíèþ, îáîçíà÷àåìîå êàê "Default:" â "man vsftpd.conf". Ìíîãèå, íå çíàÿ ýòîãî, óâåðåíû, ÷òî ïàðàìåòðàì òðåáóåòñÿ íàïðÿìóþ óêàçûâàòü 
çíà÷åíèÿ, è ïîýòîìó èõ ôàéë ñ íàñòðîéêàìè âûðàñòàåò äî îãðîìíûõ ðàçìåðîâ, õîòÿ, íà ñàìîì äåëå, îáû÷íî íåîáõîäèìî çàïèñàòü â ôàéë íàñòðîåê 
"/etc/vsftpd.conf" âñåãî ëèøü íåñêîëüêî ïàðàìåòðîâ, äëÿ óñòàíîâêè çíà÷åíèé âìåñòî çíà÷åíèé ïî óìîë÷àíèþ, åñëè çíà÷åíèÿ ïî óìîë÷àíèþ
 îñòàëüíûõ ïàðàìåòðîâ íàñòðîéêè ïðèåìëåìû, òî çíà÷èò îíè íå íóæäàþòñÿ â ïîâòîðíîì äîáàâëåíèè.

Ìíîãèå ïàðàìåòðû íàñòðîéêè çàâèñÿò îò
 äðóãèõ ïàðàìåòðîâ, íàïðèìåð, åñëè òå ïàðàìåòðû, îò êîòîðûõ îíè çàâèñÿò, îòêëþ÷åíû, òî èíòåðåñóþùèå âàñ ïàðàìåòðû íàñòðîéêè ïðîñòî
 íå áóäóò ðàáîòàòü. Íåêîòîðûå ïàðàìåòðû ÿâëÿþòñÿ âçàèìîèñêëþ÷àþùèìè, òî åñòü, ýòî çíà÷èò ÷òî îíè íå áóäóò ðàáîòàòü â ïàðå ñ 
îïðåäåëžííûìè äðóãèìè óñòàíîâëåííûìè ïàðàìåòðàìè.

Ñèìâîë ðåøžòêè "#" - ïåðåâîäèò àâòîìàòè÷åñêè ñëåäóþùóþ çà íèì âñþ ñòðîêó, â êîììåíòàðèé, 
íå èñïîëüçóåìûé ïðîãðàììîé vsftpd.

Àíîíèìíûé äîñòóï
Ïî óìîë÷àíèþ ðàçðåøží òîëüêî àíîíèìíûé àêêàóíò, êîòîðûé èìååò äîñòóï ê 
êàòàëîãó /srv/ftp/. Åñëè âû õîòèòå åãî îòêëþ÷èòü:

anonymous_enable=NO
Äëÿ òîãî, ÷òîáû èçìåíèòü êàòàëîã ïî óìîë÷àíèþ, 
èñïîëüçóéòå ïàðàìåòð anon_root :

anon_root=/data/directory
Åñëè âû õîòèòå îñòàâèòü àíîíèìíûé äîñòóï, òî Âàì âîçìîæíî 
ïîòðåáóåòñÿ óñòàíîâèòü ñëåäóþùèå ïàðàìåòðû:

anon_upload_enable=YES
anon_mkdir_write_enable=YES
anon_upload_enable - 
ðàçðåøàåò èëè çàïðåùàåò çàïèñü â êàòàëîã àíîíèìíîãî ïîëüçîâàòåëÿ (çíà÷åíèå ïåðåìåííîé anon_root)
 (ïî óìîë÷àíèþ âûêëþ÷åíî(NO));
anon_mkdir_write_enable - ðàçðåøàåò â òîì æå ñàìîì êàòàëîãå ñîçäàíèå êàòàëîãîâ 
(ïî óìîë÷àíèþ âûêëþ÷åíî(NO));
Òàêæå Âû ìîæåòå óêàçàòü âëàäåëüöà çàãðóæåííûõ íà ftp-ñåðâåð "vsftpd"
 ôàéëîâ: Ïîëåçíûì ìîæåò îêàçàòüñÿ ôàêò óêàçàíèÿ òî÷íûõ ïðàâ ñóùåñòâóþùåãî â îïåðàöèîííîé
 ñèñòåìå 
ïîëüçîâàòåëÿ êàê âëàäåëüöà çàãðóæåííûõ ôàéëîâ :

chown_uploads=YES
chown_username=username
Àâòîðèçîâàííûé
 äîñòóï
 Äëÿ òîãî, ÷òîáû ðàçðåøèòü àâòîðèçàöèþ ñóùåñòâóþùèõ â îïåðàöèîííîé ñèñòåìå ïîëüçîâàòåëåé, 
ðàñêîììåíòèðóéòå:

local_enable=YES
Äëÿ òîãî, ÷òîáû ðàçðåøèòü òàêèì (ëîêàëüíûì) ïîëüçîâàòåëÿì ïðàâà 
íà çàïèñü:

write_enable=YES
Ñîäåðæàíèå ïîëüçîâàòåëåé â «ïåñî÷íèöå»
Ïîëüçîâàòåëüñêèå ïðàâà ìîãóò èìåòü
 äîñòóï ê ôàéëàì âñåé ñèñòåìû, ýòî âñåãäà î÷åíü íå æåëàòåëüíî, è ñïîñîáñòâóåò êîìïðîìåíòàöèè ìàøèíû;
 ðåäàêòèðóÿ ïàðàìåòðû Vsftpd.conf, ïîëüçîâàòåëåé ìîæíî ïîìåñòèòü â «ïåñî÷íèöó»:


chroot_local_user=YES
Èõ 
êîðåíü FTP áóäåò òîãäà èõ ëè÷íûì êàòàëîãîì.

Ïîëüçîâàòåëüñêèé àêêàóíò èç ñèñòåìû ìîæåò èñïîëüçîâàòüñÿ íå 
òîëüêî äëÿ ftp, íî è äëÿ äðóãèõ ñëó÷àåâ; äëÿ òîãî, ÷òîáû àâòîðèçîâàòüñÿ â ñèñòåìå â ñîâåðøåííî äðóãîì ìåñòå,
 íàïðèìåð: ssh, getty (ëîãèí òåðìèíàëà). Ïîëüçîâàòåëü áóäåò èìåòü â òàêîì ñëó÷àå òàêæå äîñòóï ê îáîëî÷êå ñèñòåìû shell.
 Âû ìîæåòå íàñòðîèòü, ïðèâåäžííûå â ïðèìåðå, ñëóæáû äëÿ òîãî, ÷òîáû áëîêèðîâàòü âîçìîæíîñòü àâòîðèçàöèè ÷åðåç 
àêêàóíò ïîëüçîâàòåëÿ íà ñëóæáå èëè ïîìåñòèòü åãî â «ïåñî÷íèöó», íî óíèâåðñàëüíîå ðåøåíèå ñîñòîèò â òîì, ÷òîáû 
îòêëþ÷èòü shell äëÿ àêêàóíòà ïîëüçîâàòåëÿ.

Äëÿ ýòîãî, shell ïîëüçîâàòåëÿ íàçíà÷àåòñÿ â false, ïðîñòîé áèíàðíèê,
 êîòîðûé âîçâðàùàåò ñèãíàë îøèáêè :

usermod -s /bin/false
Çàòåì íåîáõîäèìî äîáàâèòü false â ñïèñîê îáîëî÷åê 
shell:

/bin/false >> /etc/shells
SFTP - SSL
Èçâåñòíûå ïðîáëåìû è èõ ðåøåíèÿ

Êîäèðîâêè
Äîïîëíèòåëüíàÿ èíôîðìàöèÿ


Ôàéë õîðîøî ïðîêîììåíòèðîâàí íà àíãëèéñêîì ÿçûêå, à òàêæå, âñå ïàðàìåòðû õîðîøî çàäîêóìåíòèðîâàíû è íàõîäÿòñÿ 
ïîä òåì æå èìåíåì â ðóêîâîäñòâå íà ñòðàíèöàõ man:

man vsftpd.conf
Ïåðåâîä ôàéëà "FAQ", ñîäåðæàùåãî ÷àñòî çàäàâàåìûå 
âîïðîñû, èç ïîñëåäíåé âåðñèè vsftpd äîñòóïåí ?çäåñü

Ñàìà ïðîãðàììà ðàñïîëàãàåòñÿ â êàòàëîãå "/usr/sbin/vsftpd", 
âîçìîæíî, â ðàçíûõ äèñòðèáóòèâàõ ôàéë vsftpd.conf íàõîäèòñÿ â ðàçíûõ ìåñòàõ, 
óçíàòü åãî ðàñïîëîæåíèå, ê ïðèìåðó, ìîæíî êîìàíäîé "whereis vsftpd".

Ïåðåâîä ïîñëåäíåé âåðñèè ñòðàíè÷êè vsftpd_conf.html 
äîñòóïåí çäåñü

Ïîñëå óñòàíîâêè ñëåäóåò îáðàòèòü âíèìàíèå íà ôàéëû, ñîäåðæàùèå äîêóìåíòàöèþ â êàòàëîãå "/usr/share/doc/vsftpd", 
êàòàëîã "EXAMPLE" óæå ñîäåðæèò ðàçëè÷íûå ïðèìåðû ôàéëà íàñòðîåê "vsftpd.conf".

Ïåðåâîä ðàçëè÷íûõ ïðèìåðîâ ñ äîêóìåíòàöèåé èç
 êàòàëîãà "EXAMPLE" ïîñëåäíåé âåðñèè vsftpd äîñòóïåí çäåñü 







magnet:?xt=urn:btih:E949E13E80854CFDF82F13D8A01E4CF8A72712AD&tr=http%3A%2F%2Fbt.t-ru.org%2Fann%3Fmagnet&dn=%5B
Geekbrains%5D%20%D0%92%D0%B5%D0%B1-%D0%B4%D0%B8%D0%B7%D0%B0%D0%B9%D0%BD%20%5B2015%2C%20RUS%5D




****************************

filezila  finish

*****************************
*********
************************
Prestashop start
******************
**********


check for production server settings.inc.php configuratiion

to change password without server 

config.inc.php’ aux lignes suivantes: 

$cfg['Servers'][$i]['host']= 'localhost';

$cfg['Servers'][$i]['user'] = 'root';

$cfg['Servers'][$i]['password']= 'monmotdepasse';




*****************************Prestashop finish********************





*********************************************
*********************************************

*Install Wordpress the most popular content management system on the internet
   
* Set Up PHPMyAdmin to help manage your MySQL databases from web browser.
   
* Learn more about MySQL to manage your databases.
   
* Learn how to create an SSL Certificate to secure traffic to your web server.
   
* Learn how to use SFTP to transfer files to and from your server.









server apache



sudo   apache -Smdilia2012@

sudo   gourgen -Smdilia2015@@



putty - on client


sudo apt-get install openssh-server - on server


apt install teamviewer_11.0.xxxxx_i386.deb

for usb copy/past iphone need to install sudo apt-get install gvsf-backends!

https://www.digitalocean.com/community/tutorials/linux-apache-mysql-php-lamp-ubuntu-16-04-ru








*******************************************
Jquery,bootstrap start
****************************************



download jquery and put xxx.min.js in to js folder in root of site

download bootstrap and put css and js folders in root of site

put inside head under title 

<link rel="stylesheet" href="css/bootstrap.min.css">

and before body close tags

<script src="js/3.2.1/jquery.min.js"></script>
<script src="js/bootstrap.min.js"></script> 



test jquery and bootstrap 

run this

<button class="btn btn-primary">Vote</button>


blue button will upear if no there is a problem


****************************************************
Jquery, bootstrap finish
****************************************************







soft ubuntu

1.FreeFileSync
2.




